
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Update the provisioned cluster instance
.Description
Update the provisioned cluster instance
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IProvisionedCluster
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

AGENTPOOLPROFILE <INamedAgentPoolProfile[]>: The agent pool properties for the provisioned cluster.
  [EnableAutoScaling <Boolean?>]: Whether to enable auto-scaler. Default value is false
  [MaxCount <Int32?>]: The maximum number of nodes for auto-scaling
  [MaxPod <Int32?>]: The maximum number of pods that can run on a node.
  [MinCount <Int32?>]: The minimum number of nodes for auto-scaling
  [NodeLabel <IAgentPoolProfileNodeLabels>]: The node labels to be persisted across all nodes in agent pool.
    [(Any) <String>]: This indicates any property can be added to this object.
  [NodeTaint <List<String>>]: Taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
  [OSSku <String>]: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The default is Windows2019 when OSType is Windows.
  [OSType <String>]: The particular KubernetesVersion Image OS Type (Linux, Windows)
  [Count <Int32?>]: Number of nodes in the agent pool. The default value is 1.
  [VMSize <String>]: The VM sku size of the agent pool node VMs.
  [Name <String>]: Unique name of the default agent pool in the context of the provisioned cluster. Default value is <clusterName>-nodepool1

SSHPUBLICKEY <ILinuxProfilePropertiesSshPublicKeysItem[]>: The list of SSH public keys used to authenticate with VMs. A maximum of 1 key may be specified.
  [KeyData <String>]: Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
.Link
https://learn.microsoft.com/powershell/module/az.aksarc/update-azaksarccluster
#>
function Update-AzAksArcCluster {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IProvisionedCluster])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('Name')]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
    [System.String]
    # The name of the Kubernetes cluster on which get is called.
    ${ClusterName},

    [Parameter(Mandatory)]
    [Alias('resource-group')]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String[]]
    ${adminGroupObjectIDs},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.INamedAgentPoolProfile[]]
    # The agent pool properties for the provisioned cluster.
    ${AgentPoolProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
    [System.Int32]
    ${MinCount},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Path')]
    [System.Int32]
    ${MaxCount},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates whether to enable NFS CSI Driver.
    # The default value is true.
    ${EnableAutoScaling},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.PSArgumentCompleterAttribute("True", "False", "NotApplicable")]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.String]
    # Indicates whether Azure Hybrid Benefit is opted in.
    # Default value is false
    ${LicenseProfileAzureHybridBenefit},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.Int32]
    # Number of control plane nodes.
    # The default value is 1, and the count should be an odd number
    ${ControlPlaneCount},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates whether to enable NFS CSI Driver.
    # The default value is true.
    ${NfCsiDriverEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates whether to enable SMB CSI Driver.
    # The default value is true.
    ${SmbCsiDriverEnabled},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

process {
    $Scope = "/"
    if ($PSBoundParameters.ContainsKey("SubscriptionId"))
    {
        $Scope += "subscriptions/$SubscriptionId"
        $null = $PSBoundParameters.Remove("SubscriptionId")
    }

    if ($PSBoundParameters.ContainsKey("ResourceGroupName"))
    {
        $Scope += "/resourceGroups/$ResourceGroupName"
        $null = $PSBoundParameters.Remove("ResourceGroupName")
    }
    $ConnectedClusterResourceType = "Microsoft.Kubernetes/connectedClusters"
    if ($PSBoundParameters.ContainsKey("ClusterName"))
    {
        $Scope += "/providers/$ConnectedClusterResourceType/$ClusterName"
        $null = $PSBoundParameters.Remove("ClusterName")
    }

    # Validate GUIDS
    foreach ($id in $adminGroupObjectIDs) {
        if ($id -match $guidRegex) {
            continue
        } else {
            $invalidGuid = $true
        }
    }

    if ($invalidGuid) {
        Write-Error "Invalid adminGroupObjectIDs. Not a valid GUID."
        return
    } elseif ($adminGroupObjectIDs.Length -ne 0) {
        $ShouldUpdateConnectedCluster = $true
        $adminGroupObjectIDsArr = $adminGroupObjectIDs -join '", "'
        $adminGroupObjectIDsArr = '"' + $adminGroupObjectIDsArr + '"'
        $null = $PSBoundParameters.Remove("adminGroupObjectIDs")
    }

    if ($ShouldUpdateConnectedCluster) {
          $APIVersion = "2024-01-01"
          $json = 
@"
    {
        "location": "eastus",
        "kind": "ProvisionedCluster",
        "identity": {
            "type": "SystemAssigned"
        },
        "properties": {
            "agentPublicKeyCertificate": "",
            "arcAgentProfile": {
                "desiredAgentVersion": "",
                "agentAutoUpgrade": "Enabled"
            },
            "aadProfile": {
                "enableAzureRBAC": false, 
                "adminGroupObjectIDs": [$adminGroupObjectIDsArr]
            }
        }
    }
"@  

            $null = Invoke-AzRestMethod -Path "/subscriptions/$SubscriptionId/resourceGroups/$ResourceGroupName/providers/$ConnectedClusterResourceType/$ClusterName/?api-version=$APIVersion" -Method PUT -payload $json
    }


    # $aksarccluster = Get-AzAksArcCluster -ClusterName $ClusterName -ResourceGroupName $ResourceGroupName

    $null = $PSBoundParameters.Add("ConnectedClusterResourceUri", $Scope)
    Az.AksArc.internal\Update-AzAksArcCluster @PSBoundParameters
}










}
